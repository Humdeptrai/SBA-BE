package sum25.studentcode.backend.modules.StudentPractice.scheduler;

import lombok.RequiredArgsConstructor;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import sum25.studentcode.backend.model.StudentPractice;
import sum25.studentcode.backend.modules.StudentAnswers.repository.StudentAnswersRepository;
import sum25.studentcode.backend.modules.StudentPractice.repository.StudentPracticeRepository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

@Component
@RequiredArgsConstructor
public class AutoSubmitScheduler {

    private final StudentPracticeRepository studentPracticeRepository;
    private final StudentAnswersRepository studentAnswersRepository;

    /**
     * üïí Ch·∫°y m·ªói 5 ph√∫t ƒë·ªÉ auto-submit c√°c b√†i l√†m ƒë√£ h·∫øt gi·ªù.
     * N·∫øu b√†i ƒëang IN_PROGRESS v√† session ƒë√£ qu√° h·∫°n -> set SUBMITTED + t√≠nh ƒëi·ªÉm.
     */
    @Scheduled(fixedRate = 300000) // m·ªói 5 ph√∫t (300.000ms)
    public void autoSubmitExpiredPractices() {
        // 1Ô∏è‚É£ L·∫•y danh s√°ch c√°c b√†i l√†m ch∆∞a n·ªôp m√† ƒë√£ qu√° th·ªùi gian thi
        List<StudentPractice> expiredPractices = studentPracticeRepository
                .findByStatusAndPracticeSession_EndTimeBefore(
                        StudentPractice.PracticeStatus.IN_PROGRESS,
                        LocalDateTime.now()
                );

        if (expiredPractices.isEmpty()) return;

        for (StudentPractice practice : expiredPractices) {
            try {
                // 2Ô∏è‚É£ T√≠nh t·ªïng ƒëi·ªÉm t·ª´ c√°c c√¢u tr·∫£ l·ªùi
                BigDecimal totalScore = studentAnswersRepository
                        .findByStudentPractice_PracticeId(practice.getPracticeId())
                        .stream()
                        .map(ans -> ans.getMarksEarned() != null ? ans.getMarksEarned() : BigDecimal.ZERO)
                        .reduce(BigDecimal.ZERO, BigDecimal::add);

                // 3Ô∏è‚É£ C·∫≠p nh·∫≠t tr·∫°ng th√°i
                practice.setStatus(StudentPractice.PracticeStatus.SUBMITTED);
                practice.setSubmitTime(practice.getPracticeSession().getEndTime());
                practice.setTotalScore(totalScore);

                System.out.printf("‚úÖ Auto-submitted practiceId=%d | totalScore=%.2f%n",
                        practice.getPracticeId(), totalScore);
            } catch (Exception e) {
                System.err.printf("‚ö†Ô∏è L·ªói khi auto-submit practiceId=%d: %s%n",
                        practice.getPracticeId(), e.getMessage());
            }
        }

        // 4Ô∏è‚É£ L∆∞u to√†n b·ªô v·ªÅ DB
        studentPracticeRepository.saveAll(expiredPractices);
    }
}
