package sum25.studentcode.backend.modules.StudentPractice.service;

import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import sum25.studentcode.backend.core.exception.ApiException;
import sum25.studentcode.backend.model.*;
import sum25.studentcode.backend.modules.Auth.repository.UserRepository;
import sum25.studentcode.backend.modules.MatrixQuestion.repository.MatrixQuestionRepository;
import sum25.studentcode.backend.modules.Options.repository.OptionsRepository;
import sum25.studentcode.backend.modules.PracticeSession.repository.PracticeSessionRepository;
import sum25.studentcode.backend.modules.StudentPractice.dto.request.StudentEnrollRequest;
import sum25.studentcode.backend.modules.StudentPractice.dto.request.TeacherGradeRequest;
import sum25.studentcode.backend.modules.StudentPractice.dto.response.PracticeQuestionResponse;
import sum25.studentcode.backend.modules.StudentPractice.dto.response.StudentEnrollResponse;
import sum25.studentcode.backend.modules.StudentPractice.dto.response.StudentPracticeResponse;
import sum25.studentcode.backend.modules.StudentPractice.repository.StudentPracticeRepository;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import sum25.studentcode.backend.modules.StudentAnswers.repository.StudentAnswersRepository;
import sum25.studentcode.backend.model.StudentAnswers;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class StudentPracticeServiceImpl implements StudentPracticeService {

    private final StudentPracticeRepository studentPracticeRepository;
    private final PracticeSessionRepository practiceSessionRepository;
    private final UserRepository userRepository;
    private final MatrixQuestionRepository matrixQuestionRepository;
    private final OptionsRepository optionsRepository;
    private final StudentAnswersRepository studentAnswersRepository;



    @Override
    public StudentPracticeResponse getStudentPracticeById(Long id) {
        StudentPractice studentPractice = studentPracticeRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("StudentPractice not found"));
        return convertToResponse(studentPractice);
    }

    @Override
    public List<PracticeQuestionResponse> getQuestionsForPractice(Long practiceId) {
        // 1. L·∫•y practice + user
        StudentPractice practice = studentPracticeRepository.findById(practiceId)
                .orElseThrow(() -> new ApiException("PRACTICE_NOT_FOUND", "Kh√¥ng t√¨m th·∫•y l∆∞·ª£t luy·ªán t·∫≠p.", 404));

        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();
        User currentUser = userRepository.findByUsername(username)
                .orElseThrow(() -> new ApiException("USER_NOT_FOUND", "Kh√¥ng t√¨m th·∫•y user trong h·ªá th·ªëng.", 404));

        if (!practice.getStudent().getUserId().equals(currentUser.getUserId())) {
            throw new ApiException("ACCESS_DENIED", "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p b√†i luy·ªán t·∫≠p n√†y.", 403);
        }

        // 2. Ki·ªÉm tra session
        PracticeSession session = practice.getPracticeSession();
        if (session == null)
            throw new ApiException("SESSION_NOT_FOUND", "Bu·ªïi luy·ªán t·∫≠p kh√¥ng t·ªìn t·∫°i.", 404);
        if (!session.getIsActive())
            throw new ApiException("SESSION_INACTIVE", "Bu·ªïi luy·ªán t·∫≠p kh√¥ng ho·∫°t ƒë·ªông.", 400);

        LocalDateTime now = LocalDateTime.now();
        if (now.isBefore(session.getStartTime()) || now.isAfter(session.getEndTime()))
            throw new ApiException("SESSION_TIME_INVALID", "Hi·ªán kh√¥ng trong th·ªùi gian l√†m b√†i.", 400);

        // 3. Ki·ªÉm tra tr·∫°ng th√°i practice
        if (practice.getStatus() != StudentPractice.PracticeStatus.IN_PROGRESS)
            throw new ApiException("INVALID_STATUS", "Ch·ªâ xem ƒë·ªÅ khi ƒëang l√†m b√†i (IN_PROGRESS).", 400);

        // 4. L·∫•y c√¢u h·ªèi t·ª´ Matrix
        Matrix matrix = session.getMatrix();
        if (matrix == null)
            throw new ApiException("MATRIX_NOT_FOUND", "Bu·ªïi luy·ªán t·∫≠p ch∆∞a g·∫Øn ma tr·∫≠n ƒë·ªÅ thi.", 404);

        // (Optional) C·∫≠p nh·∫≠t th·ªùi gian b·∫Øt ƒë·∫ßu l√†m
        if (practice.getPerTime() == null) {
            practice.setPerTime(LocalDateTime.now());
            studentPracticeRepository.save(practice);
        }

        // 5. Tr·∫£ c√¢u h·ªèi nh∆∞ tr∆∞·ªõc
        List<MatrixQuestion> mqs = matrixQuestionRepository.findByMatrix_MatrixId(matrix.getMatrixId());
        if (mqs.isEmpty())
            throw new ApiException("MATRIX_EMPTY", "ƒê·ªÅ thi ch∆∞a c√≥ c√¢u h·ªèi.", 404);

        return mqs.stream().map(mq -> {
            Questions q = mq.getQuestion();
            PracticeQuestionResponse dto = new PracticeQuestionResponse();
            dto.setQuestionId(q.getQuestionId());
            dto.setQuestionText(q.getQuestionText());
            dto.setOptions(optionsRepository.findByQuestion_QuestionId(q.getQuestionId())
                    .stream()
                    .map(o -> {
                        PracticeQuestionResponse.OptionItem opt = new PracticeQuestionResponse.OptionItem();
                        opt.setOptionId(o.getOptionId());
                        opt.setOptionText(o.getOptionText());
                        opt.setOptionOrder(o.getOptionOrder());
                        return opt;
                    })
                    .toList());
            return dto;
        }).toList();
    }


    @Override
    public List<StudentPracticeResponse> getAllStudentPractices() {
        return studentPracticeRepository.findAll().stream()
                .map(this::convertToResponse)
                .collect(Collectors.toList());
    }

    @Transactional
    @Override
    public StudentPracticeResponse submitPractice(Long practiceId) {
        // üîπ L·∫•y th√¥ng tin practice
        StudentPractice practice = studentPracticeRepository.findById(practiceId)
                .orElseThrow(() -> new ApiException("PRACTICE_NOT_FOUND", "Kh√¥ng t√¨m th·∫•y l∆∞·ª£t luy·ªán t·∫≠p.", 404));

        // üîπ L·∫•y user hi·ªán t·∫°i
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();
        User currentUser = userRepository.findByUsername(username)
                .orElseThrow(() -> new ApiException("USER_NOT_FOUND", "Kh√¥ng t√¨m th·∫•y user trong h·ªá th·ªëng.", 404));

        // üîπ Check quy·ªÅn: ch·ªâ student s·ªü h·ªØu practice m·ªõi ƒë∆∞·ª£c submit
        if (!practice.getStudent().getUserId().equals(currentUser.getUserId())) {
            throw new ApiException("ACCESS_DENIED", "B·∫°n kh√¥ng c√≥ quy·ªÅn n·ªôp b√†i n√†y.", 403);
        }

        // üîπ Ki·ªÉm tra session c√≤n ho·∫°t ƒë·ªông kh√¥ng
        PracticeSession session = practice.getPracticeSession();
        if (session == null)
            throw new ApiException("SESSION_NOT_FOUND", "Bu·ªïi luy·ªán t·∫≠p kh√¥ng t·ªìn t·∫°i.", 404);
        if (!session.getIsActive())
            throw new ApiException("SESSION_INACTIVE", "Bu·ªïi luy·ªán t·∫≠p n√†y ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng c√≤n ho·∫°t ƒë·ªông.", 400);

        // üîπ Ki·ªÉm tra th·ªùi gian h·ª£p l·ªá
        LocalDateTime now = LocalDateTime.now();
        if (now.isBefore(session.getStartTime()) || now.isAfter(session.getEndTime()))
            throw new ApiException("SESSION_TIME_INVALID", "Kh√¥ng th·ªÉ n·ªôp b√†i ngo√†i th·ªùi gian l√†m b√†i.", 400);

        // üîπ Ki·ªÉm tra tr·∫°ng th√°i
        if (practice.getStatus() != StudentPractice.PracticeStatus.IN_PROGRESS) {
            throw new ApiException("INVALID_STATUS", "Ch·ªâ c√≥ th·ªÉ n·ªôp b√†i khi ƒëang ·ªü tr·∫°ng th√°i IN_PROGRESS.", 400);
        }

        // ‚úÖ B·ªï sung: N·∫°p danh s√°ch c√¢u tr·∫£ l·ªùi tr∆∞·ªõc khi t√≠nh ƒëi·ªÉm
        List<StudentAnswers> answers = studentAnswersRepository.findByStudentPractice_PracticeId(practiceId);
        practice.setStudentAnswers(answers);

        if (answers == null || answers.isEmpty()) {
            throw new ApiException("NO_ANSWERS", "Ch∆∞a c√≥ c√¢u tr·∫£ l·ªùi n√†o ƒë∆∞·ª£c n·ªôp.", 400);
        }

        // ‚úÖ T√≠nh t·ªïng ƒëi·ªÉm
        BigDecimal totalScore = calculateTotalScore(practice);
        practice.setTotalScore(totalScore);
        practice.setSubmitTime(LocalDateTime.now());
        practice.setStatus(StudentPractice.PracticeStatus.SUBMITTED);

        studentPracticeRepository.save(practice);

        return convertToResponse(practice);
    }


    /** üë©‚Äçüè´ Gi√°o vi√™n ch·∫•m ƒëi·ªÉm */
    @Override
    public StudentPracticeResponse gradePractice(Long practiceId, TeacherGradeRequest request) {
        StudentPractice practice = studentPracticeRepository.findById(practiceId)
                .orElseThrow(() -> new RuntimeException("Practice not found"));

        if (practice.getStatus() != StudentPractice.PracticeStatus.SUBMITTED) {
            throw new RuntimeException("Cannot grade unless practice is SUBMITTED");
        }

        practice.setTotalScore(request.getTotalScore());
        practice.setStatus(StudentPractice.PracticeStatus.GRADED);
        practice.setUpdatedAt(LocalDateTime.now());
        studentPracticeRepository.save(practice);

        return convertToResponse(practice);
    }


    @Override
    public void deleteStudentPractice(Long id) {
        if (!studentPracticeRepository.existsById(id)) {
            throw new RuntimeException("StudentPractice not found");
        }
        studentPracticeRepository.deleteById(id);
    }

    public BigDecimal calculateTotalScore(StudentPractice practice) {
        if (practice.getStudentAnswers() == null || practice.getStudentAnswers().isEmpty()) {
            System.out.println("‚ö†Ô∏è Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi n√†o trong student_answers");
            return BigDecimal.ZERO;
        }

        BigDecimal totalScore = BigDecimal.ZERO;

        // Gom nh√≥m theo c√¢u h·ªèi
        var answersByQuestion = practice.getStudentAnswers()
                .stream()
                .collect(Collectors.groupingBy(sa -> sa.getQuestion().getQuestionId()));

        for (var entry : answersByQuestion.entrySet()) {
            Long questionId = entry.getKey();
            List<StudentAnswers> answers = entry.getValue();
            Questions question = answers.get(0).getQuestion();

            BigDecimal marksPerQuestion = matrixQuestionRepository
                    .findByQuestion_QuestionId(questionId)
                    .stream()
                    .findFirst()
                    .map(MatrixQuestion::getMarksAllocated)
                    .orElse(BigDecimal.ONE);

            List<Long> correctOptionIds = optionsRepository.findByQuestion_QuestionId(questionId)
                    .stream()
                    .filter(Options::getIsCorrect)
                    .map(Options::getOptionId)
                    .toList();

            System.out.println("\n=== DEBUG QUESTION ID: " + questionId + " ===");
            System.out.println("ƒêi·ªÉm c√¢u h·ªèi: " + marksPerQuestion);
            System.out.println("ƒê√°p √°n ƒë√∫ng: " + correctOptionIds);

            long correctChosen = answers.stream()
                    .filter(a -> {
                        Long selected = a.getSelectedOptionId();
                        boolean match = correctOptionIds.contains(Long.valueOf(selected));
                        System.out.println(" - Ch·ªçn: " + selected + " | match=" + match);
                        return match;
                    })
                    .count();

            double ratio = (double) correctChosen / correctOptionIds.size();
            BigDecimal partialScore = marksPerQuestion.multiply(BigDecimal.valueOf(ratio));
            System.out.println("‚úÖ S·ªë ƒë√∫ng: " + correctChosen + "/" + correctOptionIds.size() +
                    " | ratio=" + ratio + " | ƒëi·ªÉm c·ªông=" + partialScore);

            answers.forEach(a -> a.setMarksEarned(partialScore));
            totalScore = totalScore.add(partialScore);
        }

        System.out.println("üéØ T·ªïng ƒëi·ªÉm cu·ªëi c√πng = " + totalScore);
        return totalScore;
    }


    @Override
    public StudentEnrollResponse enrollStudent(StudentEnrollRequest request) {
        // ‚úÖ L·∫•y user hi·ªán ƒëang ƒëƒÉng nh·∫≠p
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        String username = auth.getName();
        System.out.println("DEBUG username from token = " + username);
        User student = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Authenticated student not found"));

        // ‚úÖ L·∫•y session
        PracticeSession session = practiceSessionRepository.findBySessionCode(request.getSessionCode())
                .orElseThrow(() -> new RuntimeException("Session not found or invalid code"));

        if (!session.getIsActive()) {
            throw new RuntimeException("This practice session is not active.");
        }

        // ‚úÖ Ki·ªÉm tra n·∫øu ƒë√£ ƒëƒÉng k√Ω bu·ªïi n√†y
        boolean exists = studentPracticeRepository.existsByPracticeSessionAndStudent(session, student);
        if (exists) {
            throw new RuntimeException("Student already enrolled in this session.");
        }

        // ‚úÖ L·∫•y th√¥ng tin matrix v√† exam
        var matrix = session.getMatrix();
        if (matrix == null) {
            throw new RuntimeException("This session is not linked to any matrix.");
        }

        var exam = matrix.getExam(); // c√≥ th·ªÉ null n·∫øu matrix ch∆∞a g·∫Øn exam

        // ‚úÖ T·∫°o b·∫£n ghi StudentPractice
        StudentPractice practice = StudentPractice.builder()
                .practiceSession(session)
                .student(student)
                .examCode(exam != null ? exam.getExamCode() : null)
                .status(StudentPractice.PracticeStatus.IN_PROGRESS)
                .perTime(LocalDateTime.now())
                .build();

        studentPracticeRepository.save(practice);

        // ‚úÖ Tr·∫£ v·ªÅ th√¥ng tin session
        StudentEnrollResponse response = new StudentEnrollResponse();
        response.setPracticeId(practice.getPracticeId());
        response.setSessionId(session.getSessionId());
        response.setSessionName(session.getSessionName());
        response.setExamName(exam != null ? exam.getExamName() : "(Matrix ch∆∞a g·∫Øn Exam)");
        response.setStartTime(session.getStartTime());
        response.setEndTime(session.getEndTime());
        response.setStatus(practice.getStatus().name());
        return response;
    }




    private StudentPracticeResponse convertToResponse(StudentPractice studentPractice) {
        StudentPracticeResponse response = new StudentPracticeResponse();
        response.setPracticeId(studentPractice.getPracticeId());
        response.setSessionId(studentPractice.getPracticeSession().getSessionId());
        response.setStudentId(studentPractice.getStudent().getUserId());
        response.setPerTime(studentPractice.getPerTime());
        response.setSubmitTime(studentPractice.getSubmitTime());
        response.setTotalScore(studentPractice.getTotalScore());
        response.setStatus(studentPractice.getStatus().name()); // ‚úÖ Enum ‚Üí String
        response.setCreatedAt(studentPractice.getCreatedAt());
        response.setUpdatedAt(studentPractice.getUpdatedAt());
        return response;
    }
}
