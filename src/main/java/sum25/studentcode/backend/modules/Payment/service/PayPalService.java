package sum25.studentcode.backend.modules.Payment.service;

import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.paypal.api.payments.*;
import com.paypal.base.rest.APIContext;
import com.paypal.base.rest.PayPalRESTException;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import sum25.studentcode.backend.model.Order;
import sum25.studentcode.backend.model.Pack;
import sum25.studentcode.backend.model.PaymentLog;
import sum25.studentcode.backend.model.User; // Import User ƒë·ªÉ d√πng trong depositCredit
import sum25.studentcode.backend.modules.Payment.dto.PackPurchaseRequest;
import sum25.studentcode.backend.modules.Payment.dto.PayPalPaymentResponse;
import sum25.studentcode.backend.modules.Packs.repository.PackRepository;
import sum25.studentcode.backend.modules.Payment.repository.PaymentLogRepository;
import sum25.studentcode.backend.modules.Wallet.service.WalletService;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

@Service
@RequiredArgsConstructor
@Slf4j
public class PayPalService {
    // PayPal API Context
    private final APIContext apiContext;

    // Services v√† Repositories
    private final OrderService orderService;
    private final PaymentLogRepository paymentLogRepository;
    private final PackRepository packRepository;
    // ƒê√£ thay th·∫ø TransactionService v√† WalletService (repository/save) b·∫±ng WalletService (logic)
    private final WalletService walletService;

    @Value("${paypal.cancel.url}")
    private String cancelUrl;

    @Value("${paypal.success.url}")
    private String successUrl;

    // ObjectMapper ƒë·ªÉ x·ª≠ l√Ω JSON cho Webhook
    private final ObjectMapper objectMapper = new ObjectMapper();

    /**
     * DTO ƒë∆°n gi·∫£n ƒë·ªÉ √°nh x·∫° payload Webhook.
     * WebhookEventPayload kh√¥ng c√≥ s·∫µn trong PayPal REST SDK, n√™n ta t·ª± ƒë·ªãnh nghƒ©a.
     */
    @Getter
    @Setter
    public static class WebhookEventPayload {
        @JsonProperty("event_type")
        private String eventType;

        // Resource l√† ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ (nh∆∞ Sale) m√† s·ª± ki·ªán t√°c ƒë·ªông
        private Map<String, Object> resource;
    }

    /**
     * 1. Kh·ªüi t·∫°o y√™u c·∫ßu thanh to√°n (B∆∞·ªõc 1: T·∫°o Payment).
     * H·ªó tr·ª£ t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi t·ª´ VNƒê sang USD ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi PayPal Sandbox.
     */
    public PayPalPaymentResponse createPaymentRequest(PackPurchaseRequest request, Long userId) {
        // 1Ô∏è‚É£ L·∫•y th√¥ng tin pack
        Pack pack = packRepository.findById(request.getPackId())
                .orElseThrow(() -> new RuntimeException("Pack not found: " + request.getPackId()));

        // 2Ô∏è‚É£ Ki·ªÉm tra gi√° tr·ªã g√≥i
        BigDecimal packValueVnd = pack.getPackValue();
        if (packValueVnd == null || packValueVnd.compareTo(BigDecimal.ZERO) <= 0) {
            throw new RuntimeException("Invalid pack value: " + packValueVnd);
        }

        // ‚öôÔ∏è T·ª∑ gi√° quy ƒë·ªïi VNƒê ‚Üí USD (tu·ª≥ ch·ªânh)
        BigDecimal exchangeRate = new BigDecimal("23000"); // 1 USD = 23,000 VNƒê
        BigDecimal packValueUsd = packValueVnd.divide(exchangeRate, 2, java.math.RoundingMode.HALF_UP);

        // Log th√¥ng tin ƒë·ªÉ debug
        log.info("üßæ Creating PayPal payment | Pack ID: {} | User ID: {} | Value: {} VND (~{} USD)",
                pack.getPackId(), userId, packValueVnd, packValueUsd);

        // 3Ô∏è‚É£ T·∫°o ƒë∆°n h√†ng tr·∫°ng th√°i PENDING
        Order order = orderService.createPendingOrder(userId, pack.getPackId());

        // 4Ô∏è‚É£ Chu·∫©n b·ªã d·ªØ li·ªáu thanh to√°n PayPal
        Amount amount = new Amount();
        amount.setCurrency("USD"); // Sandbox ch·ªâ h·ªó tr·ª£ c√°c lo·∫°i ti·ªÅn nh∆∞ USD, EUR, GBP, ...
        amount.setTotal(String.format("%.2f", packValueUsd)); // ƒê·∫£m b·∫£o format h·ª£p l·ªá 2 ch·ªØ s·ªë th·∫≠p ph√¢n

        com.paypal.api.payments.Transaction transaction = new com.paypal.api.payments.Transaction();
        transaction.setDescription("Purchase pack " + pack.getPackId());
        transaction.setAmount(amount);
        transaction.setInvoiceNumber(order.getOrderId().toString());

        List<com.paypal.api.payments.Transaction> transactions = Collections.singletonList(transaction);

        Payer payer = new Payer();
        payer.setPaymentMethod("paypal");

        Payment payment = new Payment();
        payment.setIntent("sale");
        payment.setPayer(payer);
        payment.setTransactions(transactions);

        RedirectUrls redirectUrls = new RedirectUrls();
        redirectUrls.setCancelUrl(cancelUrl);
        redirectUrls.setReturnUrl(successUrl);
        payment.setRedirectUrls(redirectUrls);

        try {
            // 5Ô∏è‚É£ G·ªçi API PayPal t·∫°o Payment
            Payment createdPayment = payment.create(apiContext);

            // 6Ô∏è‚É£ L·∫•y URL ng∆∞·ªùi d√πng c·∫ßn redirect
            String approvalUrl = createdPayment.getLinks().stream()
                    .filter(link -> "approval_url".equals(link.getRel()))
                    .findFirst()
                    .map(Links::getHref)
                    .orElse(null);

            // 7Ô∏è‚É£ C·∫≠p nh·∫≠t Order v√† l∆∞u log
            order.setPaymentReference(createdPayment.getId());
            orderService.saveOrder(order);
            savePaymentLog(order, createdPayment.toJSON(), "CREATE_PAYMENT_REQUEST");

            log.info("‚úÖ PayPal payment created successfully | PaymentID={} | ApprovalUrl={}",
                    createdPayment.getId(), approvalUrl);

            // 8Ô∏è‚É£ Tr·∫£ v·ªÅ ph·∫£n h·ªìi cho FE
            return PayPalPaymentResponse.builder()
                    .paymentId(createdPayment.getId())
                    .approvalUrl(approvalUrl)
                    .amount(amount.getTotal())
                    .currency(amount.getCurrency())
                    .status(createdPayment.getState())
                    .build();

        } catch (PayPalRESTException e) {
            log.error(" Error creating PayPal payment for Order {}: {}", order.getOrderId(), e.getMessage());
            orderService.failOrder(order);
            throw new RuntimeException("Payment creation failed: " + e.getMessage());
        }
    }


    /**
     * 2. Th·ª±c hi·ªán Payment v√† X√°c nh·∫≠n (B∆∞·ªõc 2: Execute Payment).
     * H√†m n√†y ch·ªâ g·ªçi API PayPal ƒë·ªÉ ho√†n t·∫•t giao d·ªãch. KH√îNG C·∫¨P NH·∫¨T WALLET/TRANSACTION.
     * @return OrderId li√™n quan
     */
    /**
     * 2. Th·ª±c hi·ªán Payment v√† X√°c nh·∫≠n (B∆∞·ªõc 2: Execute Payment).
     * H√†m n√†y ch·ªâ g·ªçi API PayPal ƒë·ªÉ ho√†n t·∫•t giao d·ªãch. KH√îNG C·∫¨P NH·∫¨T WALLET/TRANSACTION.
     * @return OrderId li√™n quan
     */
    public Long executePaymentAndVerify(String paymentId, String payerId) throws PayPalRESTException {
        //  N·∫øu log ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác l∆∞u tr√πng
        if (paymentLogRepository.existsByGatewayOrderId(paymentId)) {
            log.warn("Ô∏è Payment log already exists for paymentId {}. Skipping duplicate save.", paymentId);

            PaymentLog existing = paymentLogRepository.findByGatewayOrderId(paymentId);
            Order existingOrder = existing.getOrder();
            if (existingOrder != null) {
                return existingOrder.getOrderId();
            }

            // N·∫øu ch∆∞a c√≥ Order g·∫Øn, fallback truy v·∫•n qua OrderService
            Order order = orderService.getOrderByPaymentReference(paymentId);
            return order.getOrderId();
        }

        //  G·ªçi PayPal API ƒë·ªÉ ho√†n t·∫•t thanh to√°n
        Payment payment = new Payment();
        payment.setId(paymentId);

        PaymentExecution execution = new PaymentExecution();
        execution.setPayerId(payerId);

        Payment executedPayment = payment.execute(apiContext, execution);

        //  L·∫•y Order t∆∞∆°ng ·ª©ng
        Order order = orderService.getOrderByPaymentReference(paymentId);

        //  Ghi log an to√†n (s·∫Ω kh√¥ng tr√πng nh·ªù check ·ªü tr√™n)
        savePaymentLog(order, executedPayment.toJSON(), "EXECUTE_PAYMENT_RESPONSE");

        //  N·∫øu approved ‚Üí return orderId
        if ("approved".equalsIgnoreCase(executedPayment.getState())) {
            String invoiceNumber = executedPayment.getTransactions().get(0).getInvoiceNumber();
            if (invoiceNumber == null) {
                throw new RuntimeException("Missing Invoice Number for PayPal Payment " + paymentId);
            }
            return Long.valueOf(invoiceNumber);
        } else {
            orderService.failOrder(order);
            throw new PayPalRESTException("Payment execution failed. State: " + executedPayment.getState());
        }
    }


    /**
     * 3. X·ª≠ l√Ω Webhook (IPN) t·ª´ PayPal (B∆∞·ªõc 4: C·ªông ti·ªÅn an to√†n).
     * Logic c·ªông ti·ªÅn, t·∫°o Transaction ch·ªâ ƒë∆∞·ª£c th·ª±c hi·ªán t·∫°i ƒë√¢y.
     */
    public void processWebhook(String webhookEvent, Map<String, String> headers) throws Exception {
        log.info("üîî Received PayPal webhook. Event size: {} chars", webhookEvent.length());

        try {
            // 1. CH∆ØA TRI·ªÇN KHAI: X√°c th·ª±c Webhook.
            // Trong m√¥i tr∆∞·ªùng s·∫£n ph·∫©m, b∆∞·ªõc n√†y l√† B·∫ÆT BU·ªòC ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh h·ª£p l·ªá c·ªßa request.
            // C·∫ßn g·ªçi API verifyWebhookSignature c·ªßa PayPal.
            // T·∫°m th·ªùi b·ªè qua b∆∞·ªõc x√°c th·ª±c ƒë·ªÉ t·∫≠p trung v√†o logic c·ªët l√µi.

            // 2. Ph√¢n t√≠ch c√∫ ph√°p s·ª± ki·ªán
            WebhookEventPayload event = objectMapper.readValue(webhookEvent, WebhookEventPayload.class);
            String eventType = event.getEventType();
            log.info("üìã Processing Webhook Event Type: {}", eventType);

            if ("PAYMENT.SALE.COMPLETED".equals(eventType)) {
                log.info("üí∞ Processing PAYMENT.SALE.COMPLETED event");

                // S·ª± ki·ªán b√°o giao d·ªãch ƒë√£ ho√†n t·∫•t v√† ti·ªÅn ƒë√£ v·ªÅ Merchant
                Sale sale = objectMapper.convertValue(event.getResource(), Sale.class);
                String paymentId = sale.getParentPayment();
                String saleId = sale.getId();

                log.info("üîç Looking for order with paymentReference: {}, saleId: {}", paymentId, saleId);

                try {
                    // L·∫•y Order t·ª´ paymentReference
                    Order order = orderService.getOrderByPaymentReference(paymentId);
                    log.info("üì¶ Found order: {} with status: {}", order.getOrderId(), order.getStatus());

                    if (order.getStatus() != Order.OrderStatus.COMPLETED) {
                        // L·∫•y th√¥ng tin gi√° tr·ªã (USD from PayPal)
                        BigDecimal amount = new BigDecimal(sale.getAmount().getTotal());
                        log.info("üíµ Processing payment amount: {} USD for order: {}", amount, order.getOrderId());

                        // 3. Th·ª±c hi·ªán c·ªông Credit v√† ghi Transaction
                        processSuccessfulOrder(order, amount, paymentId, saleId);

                        log.info("‚úÖ Successfully processed Webhook and completed Order {}.", order.getOrderId());
                    } else {
                        log.warn("‚ö†Ô∏è Webhook for PaymentID {} received, but Order {} is already COMPLETED. Ignoring.",
                                paymentId, order.getOrderId());
                    }
                } catch (Exception orderException) {
                    log.error("‚ùå Error processing order for paymentId {}: {}", paymentId, orderException.getMessage(), orderException);
                    throw orderException;
                }
            } else {
                log.info("‚ÑπÔ∏è Ignoring webhook event type: {}", eventType);
            }
        } catch (Exception e) {
            log.error("‚ùå Critical error processing webhook: {}", e.getMessage(), e);
            log.error("üìÑ Webhook payload that failed: {}", webhookEvent);
            throw e;
        }
    }

    /**
     * Logic nghi·ªáp v·ª• c·ªët l√µi: C·∫≠p nh·∫≠t Wallet v√† t·∫°o Transaction.
     * CH·ªà ƒê∆Ø·ª¢C G·ªåI KHI C√ì X√ÅC NH·∫¨N AN TO√ÄN (t·ª´ Webhook).
     */
    private void processSuccessfulOrder(Order order, BigDecimal realAmount, String paymentId, String saleId) {

        // 1. C·∫≠p nh·∫≠t Order status th√†nh COMPLETED. L∆∞u Sale ID (m√£ giao d·ªãch cu·ªëi c√πng) v√†o paymentReference.
        // D√ôNG Sale ID ƒë·ªÉ ƒë·∫£m b·∫£o Order ghi l·∫°i m√£ giao d·ªãch th√†nh c√¥ng cu·ªëi c√πng
        orderService.completeOrderSuccess(order, saleId);

        // 2. L·∫•y s·ªë Credit c·∫ßn c·ªông (Gi·∫£ ƒë·ªãnh Order.getTransactionValue() l√† s·ªë Credit)
        // ƒê√¢y l√† ƒëi·ªÉm quan tr·ªçng: ch·ªâ s·ªë Credit (ƒë∆°n v·ªã n·ªôi b·ªô) m·ªõi ƒë∆∞·ª£c c·ªông v√†o v√≠.
        BigDecimal creditAmount = order.getTransactionValue();

        // 3. S·ª≠ d·ª•ng logic nghi·ªáp v·ª• t·∫≠p trung c·ªßa WalletService ƒë·ªÉ n·∫°p Credit v√† t·∫°o Transaction
        // B·∫Øt bu·ªôc s·ª≠ d·ª•ng depositCredit() ƒë·ªÉ ƒë·∫£m b·∫£o t·∫°o Transaction.
        User user = order.getUser(); // Gi·∫£ ƒë·ªãnh Order.getUser() tr·∫£ v·ªÅ User Entity
        walletService.depositCredit(user, creditAmount, order, saleId);

        log.info("Wallet updated for Order #{}. Added {} Credit.", order.getOrderId(), creditAmount);
    }


    /**
     * Fallback method to create transaction during success redirect if webhook hasn't been called.
     * This ensures transactions are created even if webhooks fail or are delayed.
     * @param paymentId PayPal payment ID
     * @param payerId PayPal payer ID
     * @return true if transaction was created, false if it already existed
     */
    @Transactional
    public boolean createTransactionIfNotExists(String paymentId, String payerId) {
        try {
            log.info("üîç Checking if transaction exists for paymentId: {}", paymentId);

            // Get the order by payment reference
            Order order = orderService.getOrderByPaymentReference(paymentId);

            // Check if transaction already exists for this payment
            if (walletService.transactionExistsForPayment(paymentId)) {
                log.info("‚ÑπÔ∏è Transaction already exists for paymentId: {}", paymentId);
                return false;
            }

            // Get payment details from PayPal to get the actual amount paid
            Payment payment = Payment.get(apiContext, paymentId);

            // Find the executed payment transaction
            com.paypal.api.payments.Transaction paypalTransaction = payment.getTransactions().get(0);
            BigDecimal amountPaid = new BigDecimal(paypalTransaction.getAmount().getTotal());

            log.info("üí∞ Creating fallback transaction for order {} with amount {} USD",
                    order.getOrderId(), amountPaid);

            // Create the transaction using the same logic as webhook
            processSuccessfulOrder(order, amountPaid, paymentId, paymentId + "_fallback");

            return true;

        } catch (Exception e) {
            log.error("‚ùå Error creating fallback transaction for paymentId {}: {}", paymentId, e.getMessage(), e);
            // Don't throw exception - this is a fallback, main payment already succeeded
            return false;
        }
    }

    // --- H√†m Ti·ªán √≠ch ---

    private void savePaymentLog(Order order, String responseJson, String transactionType) {

        if (paymentLogRepository.existsByGatewayOrderId(order.getPaymentReference())) {
            log.warn("Duplicate log detected for gateway_order_id={}, skip saving.", order.getPaymentReference());
            return;
        }

        PaymentLog log = PaymentLog.builder()
                .order(order)
                .amount(order.getTransactionValue()) // ho·∫∑c l·∫•y pack.getPackValue() n·∫øu mu·ªën ghi gi√° ti·ªÅn
                .gatewayOrderId(order.getPaymentReference())
                .paymentGateway("PAYPAL")
                .requestBody(transactionType)
                .responseBody(responseJson)
                .responseCode(0)
                .status(order.getStatus())
                .build();

        paymentLogRepository.save(log);
    }
}
